// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTextnotes(t *testing.T) {
	t.Parallel()

	query := Textnotes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTextnotesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTextnotesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Textnotes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTextnotesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TextnoteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTextnotesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TextnoteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Textnote exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TextnoteExists to return true, but got false.")
	}
}

func testTextnotesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	textnoteFound, err := FindTextnote(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if textnoteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTextnotesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Textnotes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTextnotesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Textnotes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTextnotesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	textnoteOne := &Textnote{}
	textnoteTwo := &Textnote{}
	if err = randomize.Struct(seed, textnoteOne, textnoteDBTypes, false, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}
	if err = randomize.Struct(seed, textnoteTwo, textnoteDBTypes, false, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = textnoteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = textnoteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Textnotes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTextnotesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	textnoteOne := &Textnote{}
	textnoteTwo := &Textnote{}
	if err = randomize.Struct(seed, textnoteOne, textnoteDBTypes, false, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}
	if err = randomize.Struct(seed, textnoteTwo, textnoteDBTypes, false, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = textnoteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = textnoteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func textnoteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func textnoteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Textnote) error {
	*o = Textnote{}
	return nil
}

func testTextnotesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Textnote{}
	o := &Textnote{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, textnoteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Textnote object: %s", err)
	}

	AddTextnoteHook(boil.BeforeInsertHook, textnoteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	textnoteBeforeInsertHooks = []TextnoteHook{}

	AddTextnoteHook(boil.AfterInsertHook, textnoteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	textnoteAfterInsertHooks = []TextnoteHook{}

	AddTextnoteHook(boil.AfterSelectHook, textnoteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	textnoteAfterSelectHooks = []TextnoteHook{}

	AddTextnoteHook(boil.BeforeUpdateHook, textnoteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	textnoteBeforeUpdateHooks = []TextnoteHook{}

	AddTextnoteHook(boil.AfterUpdateHook, textnoteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	textnoteAfterUpdateHooks = []TextnoteHook{}

	AddTextnoteHook(boil.BeforeDeleteHook, textnoteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	textnoteBeforeDeleteHooks = []TextnoteHook{}

	AddTextnoteHook(boil.AfterDeleteHook, textnoteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	textnoteAfterDeleteHooks = []TextnoteHook{}

	AddTextnoteHook(boil.BeforeUpsertHook, textnoteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	textnoteBeforeUpsertHooks = []TextnoteHook{}

	AddTextnoteHook(boil.AfterUpsertHook, textnoteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	textnoteAfterUpsertHooks = []TextnoteHook{}
}

func testTextnotesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTextnotesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(textnoteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTextnotesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTextnotesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TextnoteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTextnotesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Textnotes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	textnoteDBTypes = map[string]string{`ID`: `bigint`, `Title`: `character varying`, `Note`: `text`, `Finished`: `boolean`, `DueDate`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testTextnotesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(textnotePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(textnoteAllColumns) == len(textnotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTextnotesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(textnoteAllColumns) == len(textnotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Textnote{}
	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, textnoteDBTypes, true, textnotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(textnoteAllColumns, textnotePrimaryKeyColumns) {
		fields = textnoteAllColumns
	} else {
		fields = strmangle.SetComplement(
			textnoteAllColumns,
			textnotePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TextnoteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTextnotesUpsert(t *testing.T) {
	t.Parallel()

	if len(textnoteAllColumns) == len(textnotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Textnote{}
	if err = randomize.Struct(seed, &o, textnoteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Textnote: %s", err)
	}

	count, err := Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, textnoteDBTypes, false, textnotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Textnote struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Textnote: %s", err)
	}

	count, err = Textnotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
